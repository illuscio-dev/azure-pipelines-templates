parameters:

  # Whether to build and publish docs.
  - name: publishDocs
    type: boolean

steps:

  # Install AWS CLI
  - script: pip install awscli --upgrade
    displayName: 'Install AWS CLI'
    condition: |
        and(
          succeeded(),
          ${{ parameters.publishDocs }},
          eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        )

  # Sync S3 Contents to latest bucket
  - script: |
      aws s3 sync \
        "./zdocs/build/html" "s3://$(DOCS_S3_BUCKET)/$(REPO_NAME)/latest" \
        --delete
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Upload docs to S3: Latest'
    condition: |
        and(
          succeeded(),
          ${{ parameters.publishDocs }},
          eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        )

  # Sync S3 Contents to version bucket
  - script: |
      aws s3 sync \
        "s3://$(DOCS_S3_BUCKET)/$(REPO_NAME)/latest" \
        "s3://$(DOCS_S3_BUCKET)/$(REPO_NAME)/v$(RELEASE_VERSION)"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Sync S3 latest -> version'
    condition: |
        and(
          succeeded(),
          ${{ parameters.publishDocs }},
          eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        )

  # Invalidate Content Cache For Latest
  - script: |
      aws cloudfront create-invalidation \
        --distribution-id $(DOCS_CLOUDFORMATION_DISTRO_ID) \
        --paths "/$(REPO_NAME)/latest/*"
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Invalidate CloudFront Cache'
    condition: |
        and(
          succeeded(),
          ${{ parameters.publishDocs }},
          eq(variables['Build.SourceBranch'], 'refs/heads/dev')
        )